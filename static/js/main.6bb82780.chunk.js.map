{"version":3,"sources":["Editlabel.js","Listitem.js","Todolist.js","Todoboard.js","App.js","serviceWorker.js","index.js"],"names":["Editlabel","props","isEdit","onSubmit","event","preventDefault","setIsEdit","onDragStart","draggable","className","value","content","autoFocus","onFocus","target","select","onChange","id","onBlur","stopPropagation","onClick","Itemmenu","style","top","posY","left","posX","Listitem","React","useState","contextMenu","setContextMenu","DeleteButton","pageX","pageY","String","fromCharCode","Container","key","draggableId","toString","index","parseInt","provided","ref","innerRef","draggableProps","dragHandleProps","children","onDeleteClick","Todolist","listDispatch","useContext","ListDispatchContext","itemDispatch","ItemDispatchContext","isTitleEdit","setTitleEdit","changeItem","newContent","type","payload","handleAdditemClick","listId","itemId","getId","itemIndex","isPlaceholder","changeListTitle","renderedItems","ownedItems","map","item","allItems","thisClass","Title","title","canDelete","List","droppableId","droppableProps","placeholder","AddButton","fontsize","listReducer","state","action","filter","list","items","includes","insertIndex","length","isNaN","slice","concat","movedItem","sourceList","splice","sourceIndex","destList","destIndex","obj","itemReducer","createContext","initialListState","initialItemState","Todoboard","useReducer","lists","startId","nextItemId","setNextItemId","outId","addList","nl","removeList","forEach","getListSize","AddListButton","ListContainer","onDragEnd","source","destination","Provider","getSize","canEditTitle","width","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bb82780.chunk.js","sourcesContent":["import React from 'react';\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box+form on click\n  // props:\n  //  id: integer, unique to the app state for manipulating \n  //      the label inside state object\n  //  content: string, displayed text on the label\n  //  class: for setting className (CSS styles)\n  //  isEdit: bool, true if in editable input state, false if\n  //          plain text span\n  //  setIsEdit: function ref for setting isEdit on parent\n  //  onChange: function ref for controlling input on parent\n  //            state\n\n  const preventDrag = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  return (\n    <>\n    {props.isEdit === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            props.setIsEdit(false)}\n          }\n          onDragStart={event => {\n            return false\n          }}\n          draggable={false}\n        >\n          <input\n            draggable={false}\n            className={props.className}\n            value={props.content}\n            autoFocus={true}\n            onFocus={event => event.target.select()}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => props.setIsEdit(false)}\n            onDragStart={preventDrag}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.className}\n          onClick={event => props.setIsEdit(true)}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nexport default Editlabel;\n","import React from 'react'\nimport Editlabel from './Editlabel';\nimport {Draggable} from 'react-beautiful-dnd';\n\n// A single todo item. Editable (with Editlabel), and draggable, onto any <Todolist /> \n//\n// props:\n//  id: integer, unique on the page, for manipulating in\n//        top-level state\n//  content: string, the text content of the todo, passed down\n//            from top-level state\n//  onChange: function ref, passed down to child Editlabel for\n//            controlling the input when editing content\n//  onDeleteClick: function ref, passed from parent Todolist,\n//      for deleting this todo from top-level state\n\nconst Itemmenu = (props) => {\n  return (\n    <button\n      className=\"item-menu\"\n      autoFocus={true}\n      style={{ top: props.posY, left: props.posX }}\n      onClick={props.onClick}\n      onBlur={props.onBlur}\n    >Delete</button>\n  );\n};\n\nconst Listitem = (props) => {\n  // State hooks\n  const [contextMenu, setContextMenu] = React.useState([0,0,false]);\n  const [isEdit, setIsEdit] = React.useState(false);\n\n  const DeleteButton = () => {\n    return (\n        <button\n          className=\"deleteItemButton list-item-objects\"\n          onClick={event => setContextMenu([event.pageX, event.pageY, !contextMenu[2]])}\n        >\n        {String.fromCharCode(9899) + ' ' + String.fromCharCode(9899) + ' ' + String.fromCharCode(9899)}\n        </button>\n    );\n  };\n\n  const Container = (props) => {\n    return (\n      <Draggable \n        key={props.id}\n        draggableId={props.id.toString()} \n        index={parseInt(props.index)}\n      >\n        {(provided) => (\n          <div \n            className=\"list-item\" \n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            {props.children}\n          </div>\n        )}\n      </Draggable>\n    );\n  };\n\n  return (\n      <Container id={props.id} index={parseInt(props.index)}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.id}\n          content={props.content}\n          onChange={props.onChange}\n          isEdit={isEdit}\n          setIsEdit={setIsEdit}\n        />\n        <DeleteButton />\n        {contextMenu[2] && \n          <Itemmenu\n            posX={contextMenu[0]}\n            posY={contextMenu[1]}\n            onClick={props.onDeleteClick}\n          onBlur={event => setContextMenu([0,0,!contextMenu])}\n          />\n        }\n      </Container>\n  );\n};\n\nexport default Listitem;\n","import React from 'react';\nimport Editlabel from './Editlabel';\nimport Listitem from './Listitem';\nimport {ListDispatchContext, ItemDispatchContext} from './Todoboard.js';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Todolist = (props) => {\n  const listDispatch = React.useContext(ListDispatchContext);\n  const itemDispatch = React.useContext(ItemDispatchContext);\n  const [isTitleEdit, setTitleEdit] = React.useState(false);\n\n  const changeItem = (id, newContent) => {\n    itemDispatch({\n      type: 'UPDATE_TODO_CONTENT',\n      payload: {id: id, content: newContent}\n    });\n  };\n\n  const removeItem = (id) => {\n    itemDispatch({\n      type: 'REMOVE_TODO',\n      payload: {\n        listId: props.id,\n        itemId: id,\n      },\n    });\n    listDispatch({\n      type: 'REMOVE_TODO',\n      payload: {\n        listId: props.id,\n        itemId: id,\n      },\n    });\n  };\n\n  const handleAdditemClick = () => {\n    listDispatch({\n      type: 'INSERT_TODO',\n      payload: {\n        listId: props.id,\n        itemId: props.getId(),\n        itemIndex: -1,\n      }\n    });\n    itemDispatch({\n      type: 'ADD_TODO',\n      payload: {\n        id: props.getId(),\n        content: \"Click to edit\",\n        isPlaceholder: false}\n    });\n  };\n\n  const changeListTitle = (id, content) => {\n    listDispatch({\n      type: 'UPDATE_LIST_TITLE',\n      id: id,\n      payload: content\n    });\n  };\n\n  const renderedItems = (\n    props.ownedItems.map( (item, index) => (\n      <Listitem\n        key={props.allItems[item].id}\n        id={props.allItems[item].id}\n        index={index}\n        content={props.allItems[item].content}\n        isPlaceholder={props.allItems[item].isPlaceholder}\n        onChange={changeItem}\n        onDeleteClick={() => removeItem(item)}\n      />\n    ))\n  );\n\n  const Container = (props) => {\n    return (\n      <div className={`${props.thisClass}-individual`}>\n        {props.children}\n      </div>\n    );\n  };\n\n  const Title = () => {\n    return (\n      <div className={`${props.thisClass}-individual-title`}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.id}\n          content={props.title}\n          onChange={changeListTitle}\n          isEdit={isTitleEdit}\n          setIsEdit={setTitleEdit}\n        />\n      {props.canDelete &&\n        <button\n          className=\"list-delete-button\"\n          onClick={props.onDeleteClick}\n        >X</button>\n      }\n      </div>\n    );\n  };\n\n  const List = () => {\n    \n    return (\n      <Droppable droppableId={props.id}>\n        { (provided) => (\n          <div \n            ref={provided.innerRef} \n            {...provided.droppableProps}\n            className={`${props.thisClass}-list`}\n          >\n            {renderedItems}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n\n  const AddButton = () => {\n    return (\n      <button\n        className={\"addItemButton\"}\n        style={{ fontsize: '2rem' }}\n        onClick={handleAdditemClick}\n      >{\"+\"}</button>\n    );\n  };\n\n  return (\n    <Container thisClass={props.thisClass}>\n      <Title />\n      <List />\n      <AddButton />\n    </Container>\n  );\n};\n\nexport default Todolist;\n","import React from 'react';\nimport Todolist from './Todolist';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport './Todoboard.css';\n\nconst listReducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_LIST':\n      return [ ...state, action.payload ];\n    case 'REMOVE_LIST':\n      return state.filter(list => list.id !== action.listId);\n    case 'UPDATE_LIST_TITLE':\n      return state.map( list => {\n        if (list.id === action.id) {\n          return { ...list, title: action.payload};\n        } else {\n          return list\n        }\n      });\n    case 'INSERT_TODO':\n      // payload: \n      //  - listId: id of list item goes into\n      //  - itemId: id of item being inserted\n      //  - insertIndex: index to insert item at, or -1 to append\n      return state.map( list => {\n        if (list.id === action.payload.listId) {\n          // return if item already in list, prevents adding\n          // multiple times when moving around inside list\n          if (list.items.includes(action.payload.itemId)) {\n            return list;\n          }\n          let insertIndex = (action.payload.itemIndex === -1 ? list.items.length : action.payload.itemIndex)\n          // bandaid to fix insertIndex arriving as undefined\n          if (isNaN(insertIndex)) insertIndex = list.items.length;\n          return {...list, items: list.items.slice(0,insertIndex).concat(action.payload.itemId).concat(list.items.slice(insertIndex, list.items.length))}\n        } else {\n          return list\n        }\n      });\n    case 'MOVE_TODO':\n      let movedItem = state.filter( list => list.id === action.payload.sourceList)[0].items.splice(action.payload.sourceIndex,1);\n      return state.map( list => {\n        if (list.id === action.payload.destList) {\n          return {\n            ...list,\n            items: list.items.slice(0,action.payload.destIndex).concat(movedItem).concat(list.items.slice(action.payload.destIndex, list.items.length)),\n          }\n        } else {\n          return list\n        }\n      })\n    case 'REMOVE_TODO':\n      // payload:\n      //  - listId: id of list losing the todo\n      //  - itemId: id of the item being removed\n      //  : should check and make sure there's only one of\n      //     the specified id?\n      return state.map( list => {\n        if (list.id === action.payload.listId) {\n          let obj = list.items;\n          return {...list, items: obj.filter(\n            item => item !== action.payload.itemId),}\n        } else {\n          return list\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst itemReducer = (state, action) => {\n  let obj = null;\n  switch(action.type) {\n    case 'ADD_TODO':\n      return {...state, [action.payload.id]: action.payload};\n    case 'REMOVE_TODO':\n      delete state[action.payload.itemId];\n      return state;\n    case 'UPDATE_TODO_CONTENT':\n      obj = state[action.payload.id];\n      return {...state, [action.payload.id]: {...obj, content: action.payload.content}};\n    case 'SET_IS_PLACEHOLDER':\n      obj = state[action.payload.itemId];\n      return {...state, [action.payload.itemId]: {...obj, isPlaceholder: action.payload.isPlaceholder}};\n    default:\n      return state;\n  }\n};\n\nexport const ListDispatchContext = React.createContext(null);\nexport const ItemDispatchContext = React.createContext(null);\n\n// Data architecture:\n//  Three reducers:\n//  - listReducer: An array of JS Objects\n//      - id: Integer, unique within the application\n//      - title: String, title of the list\n//  - itemReducer: An array of item objects:\n//      - id: Integer, unique within the application\n//      - content: String, the actual todo-text input by user\n//      - index: order placement on the list\n//  - dragReducer: Object with info about current drag operation\n//      - item: Integer, id of currently dragged item\n//      - list: Integer, id of currently hovered list\n//       \n//  \n//  * Dragged item information is tracked outside of the \n//    built-in event.dataTransfer object, because the HTML5\n//    drag-and-drop spec does not allow dataTransfer to be\n//    accessed during a dragOver event. However, I need to \n//    know which item is being dragged over so I can update\n//    it's owning list, and index/order in the list, as the\n//    user drags the item around - allowing for visual \n//    feedback in the form of a placeholder/shadow item\n//    underneath the user's cursor.\n// \n//  There are a handful of properties that don't get stored\n//    in the reducer, for example whether a list can be \n//    deleted - this is hardcoded to off for the weekdays, and\n//    on for everything else. May change in the future.\n//\n//  Lists also receive their current number of items as a prop\n//    for passing through itemDispatch to set correct item \n//    order (new items are assigned index=listSize) \n//      -> no longer true since switch to arrays of items on lists\n//\n//  The board is constructed by referencing both reducers to\n//    get the lists and their items, pulling item content out\n//    of the item reducer along the way.\n\nconst initialListState = [\n  {id: 'm', title: \"Monday\", items: []},\n  {id: 't', title: \"Tuesday\", items: []},\n  {id: 'w', title: \"Wednesday\", items: []},\n  {id: 'r', title: \"Thursday\", items: []},\n  {id: 'f', title: \"Friday\", items: []},\n  {id: 's', title: \"Saturday\", items: []},\n  {id: 'u', title: \"Sunday\", items: []},\n];\n\nconst initialItemState = {};\n\nconst Todoboard = (props) => {\n  const [lists, listDispatch] = React.useReducer(listReducer, initialListState);\n  const [allItems, itemDispatch] = React.useReducer(itemReducer, initialItemState);\n\n  const [nextItemId, setNextItemId] = React.useState(props.startId || 0);\n\n  const getId = () => {\n    const outId = nextItemId;\n    setNextItemId(nextItemId + 1);\n    return outId;\n  };\n  \n  const newList = () => {\n    const outList = {\n      title: \"New List\",\n      id: getId(),\n      items: [],\n    };\n    return outList;\n  };\n\n  const addList = () => {\n    const nl = newList();\n    listDispatch({type: 'ADD_LIST', listId: nl.id, payload: nl});\n  };\n\n  const removeList = (listId) => {\n    // remove a lists items first to prevent orphaned data\n    // - remember items on lists are just id's!\n    lists.map( list => {\n      if (list.id === listId) {\n        list.items.forEach( item => {\n          itemDispatch({\n            type: 'REMOVE_TODO',\n            payload: {\n              itemId: item,\n            },\n          });\n        });\n      }\n      return list\n    });\n    listDispatch({type: 'REMOVE_LIST', listId: listId});\n  };\n\n  const getListSize = (listId) => {\n    return lists[listId].items.length;\n  };\n\n  const AddListButton = () => {\n    return (\n      <button\n        className=\"addListButton\"\n        onClick={addList}\n      >{\"+ Add list\"}</button>\n    );\n  };\n\n  const ListContainer = (props) => {\n    return (\n      <div className={props.thisClass}>\n        <div className={`${props.thisClass}-container`}>\n          {props.children}\n        </div>\n      </div>\n    );\n  };\n\n  const onDragEnd = ({source, destination}) => {\n    if (source === null || destination === null) return;\n    listDispatch({\n      type: 'MOVE_TODO',\n      payload: {\n        sourceList: source.droppableId,\n        sourceIndex: source.index,\n        destList: destination.droppableId,\n        destIndex: destination.index,\n      }\n    });\n  };\n\n  return (\n    <>\n    <DragDropContext onDragEnd={onDragEnd}>\n    <ListDispatchContext.Provider value={listDispatch}>\n    <ItemDispatchContext.Provider value={itemDispatch}>\n    <ListContainer thisClass=\"calendar\">\n        {lists.map( (list, index) => (\n          (index <= 6) &&\n              <>\n              <Todolist\n                thisClass={\"calendar\"}\n                title={list.title}\n                key={list.id}\n                id={list.id}\n                ownedItems={list.items}\n                allItems={allItems}\n                getSize={getListSize}\n                getId={getId}\n                canDelete={false}\n                canEditTitle={false}\n                onDeleteClick={() => removeList(list.id)}\n              />\n              </>\n        ))}\n    </ListContainer>\n    <hr style={{width: \"90vw\"}}/>\n    <ListContainer thisClass=\"todo\">\n        {lists.length > 0 &&\n          <>\n          {lists.map( (list, index) => (\n            (index > 6) && \n            <>\n             <Todolist\n                thisClass={\"todo\"}\n                title={list.title}\n                key={list.id}\n                id={list.id}\n                ownedItems={list.items}\n                allItems={allItems}\n                getId={getId} \n                canDelete={true}\n                canEditTitle={true}\n              onDeleteClick={() => removeList(list.id)}\n             />\n            </>\n          ))}\n          </>\n        }\n        <AddListButton />\n    </ListContainer>\n    </ItemDispatchContext.Provider>\n    </ListDispatchContext.Provider>\n    </DragDropContext>\n    </>\n  )\n};\n\nexport default Todoboard;\n","import React from 'react';\nimport Todoboard from './Todoboard';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n        <div className=\"app\">\n          <Todoboard />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}