{"version":3,"sources":["Editlabel.js","stateManager.js","Listitem.js","Todolist.js","Todoboard.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Editlabel","props","callbackRef","useCallback","inputBox","focus","isEdit","onSubmit","event","preventDefault","setIsEdit","className","value","content","ref","onChange","id","target","onBlur","onClick","stateReducer","state","action","getId","freeIds","length","pop","nextId","type","newState","initialState","newTodo","items","lists","map","list","listId","concat","push","itemId","filter","item","newList","title","toString","isTitleEdit","newTitle","movedItem","find","payload","sourceList","splice","sourceIndex","destList","slice","destIndex","StateDispatchContext","React","createContext","Itemmenu","autoFocus","style","top","posY","left","posX","Listitem","useState","contextMenu","setContextMenu","stateDispatch","useContext","DeleteButton","pageX","pageY","String","fromCharCode","Container","draggableId","index","parseInt","provided","innerRef","draggableProps","dragHandleProps","children","itemObject","onDeleteClick","Todolist","changeItem","newContent","handleAdditemClick","setTitleEdit","changeListTitle","renderedItems","todoState","thisClass","Title","canDelete","List","droppableId","droppableProps","placeholder","AddButton","fontsize","Todoboard","addList","AddListButton","ListContainer","canEditTitle","forEach","onDragEnd","source","destination","width","color","SettingsMenu","isExportShowing","setIsExportShowing","isImportShowing","setIsImportShowing","console","log","setSettingsMenuProps","stopPropagation","window","confirm","ExportDisplay","defaultValue","btoa","JSON","stringify","ImportDisplay","importData","setImportData","margin","parse","atob","Navbar","settingsMenuProps","offsetLeft","offsetTop","App","useReducer","localStorage","getItem","useEffect","setItem","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df1bf16f.chunk.js","sourcesContent":["import React from 'react';\nimport {useCallback} from 'react';\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box+form on click\n  // props:\n  //  id: integer, unique to the app state for manipulating \n  //      the label inside state object\n  //  content: string, displayed text on the label\n  //  class: for setting className (CSS styles)\n  //  isEdit: bool, true if in editable input state, false if\n  //          plain text span\n  //  setIsEdit: function ref for setting isEdit on parent\n  //  onChange: function ref for controlling input on parent\n  //            state\n\n  const callbackRef = useCallback(inputBox => {\n    if (inputBox) {\n      inputBox.focus();\n    }\n  }, []);\n\n  return (\n    <>\n    {props.isEdit === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            props.setIsEdit()\n          }}\n        >\n          <input\n            className={props.className}\n            value={props.content}\n            ref={callbackRef}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => props.setIsEdit()}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.className}\n          onClick={event => props.setIsEdit()}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nexport default Editlabel;\n","import React from 'react';\n\n// Data architecture:\n//  Two reducers:\n//  - listReducer: An array of JS Objects\n//      - id: Integer, unique within the application\n//      - title: String, title of the list\n//  - itemReducer: An array of item objects:\n//      - id: Integer, unique within the application\n//      - content: String, the actual todo-text input by user\n//      - isEdit: boolean, controls edit mode on Todos\n//\n// \n//  There are a handful of properties that don't get stored\n//    in the reducer, for example whether a list can be \n//    deleted - hardcoded to off for the weekdays, and\n//    on for everything else. May change in the future.\n//\n//  The board is constructed by referencing both reducers to\n//    get the lists and their items, pulling item content out\n//    of the item reducer along the way.\n\n\nexport const stateReducer = (state, action) => {\n  const getId = () => {\n    return (state.freeIds.length > 0)\n      ? state.freeIds.pop()\n      : state.nextId++\n  };\n\n  // item management\n  switch(action.type) {\n\n    case 'LOAD_NEW_STATE':\n      // replace current state with new state object\n      //   used when importing (manually or from backend) or\n      //   wiping a fresh board\n      // newState: object holding new state\n      return action.newState;\n\n    case 'CLEAR_STATE':\n      // wipe state and replace with empty initialState\n      return initialState;\n\n    case 'ADD_TODO':\n      // add a new todo to the item object and a particular\n      //    list, with new ID from getId()\n      // listId: id of the list where the new item will be\n      //          appended\n      const newTodo = {\n        id: getId(),\n        content: \"Click to edit\",\n        isEdit: true,\n      }\n      return {\n        ...state,\n        items: {\n          ...state.items,\n          [newTodo.id]: newTodo\n        },\n        lists: state.lists.map( list => {\n          if (list.id === action.listId) {\n            return {\n              ...list,\n              // just add it to the end of the list for now\n              items: list.items.concat(newTodo.id)\n            };\n          } else {\n            return list\n          };\n        }),\n      };\n    case 'REMOVE_TODO':\n      // remove item from item object and owning list,\n      //   put id into freeIds stack\n      // listID: list that has this item\n      // itemID: the item in question\n\n      // add ID to freeIds stack\n      state.freeIds.push(action.itemId);\n      // remove item from item object\n      delete state.items[action.itemId]\n      // remap lists arrays without the deleted itemId\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.listId) {\n          return {...list, items: list.items.filter(\n            item => item !== action.itemId)}\n        } else {\n          return list\n        }\n      })};\n    case 'SET_IS_EDIT':\n      // turn edit mode on or off for a particular todo\n      // itemId: numerical ID of the item in question\n      // newState: true or false\n      return {...state,\n        items: {\n          ...state.items,\n          [action.itemId]: {\n              ...state.items[action.itemId],\n              isEdit: action.newState},\n        }\n      }\n    case 'UPDATE_TODO_CONTENT':\n      // set new content for a particular todo\n      //   whether controlled or uncontrolled\n      // itemId: item in question\n      // content: new content to set\n      return {...state, items: {...state.items, [action.itemId]: {...state.items[action.itemId], content: action.content}}}\n  // list management\n    case 'ADD_LIST':\n      // add a new list, get id from getIds()\n      // payload: new list\n      const newList = {\n        title: \"New List\",\n        id: getId().toString(),\n        items: [],\n      };\n      return {...state, lists: [...state.lists, newList]};\n    case 'REMOVE_LIST':\n      // remove a particular list, put id in freeIds stack\n      // listId: numerical ID of the list in question\n      state.freeIds.push(action.listId);\n      return {...state, lists: state.lists.filter(\n        list => list.id !== action.listId)\n      };\n    case 'SET_LIST_TITLE_IS_EDIT':\n      // turn edit mode on or off for a particular list title\n      // listId: numerical ID of the list in question\n      // newState: true or false\n      return {...state,\n        lists: state.lists.map( list => {\n          if (list.id === action.listId) {\n            list.isTitleEdit = action.newState; \n            return list\n          } else {\n            return list\n          }\n        }),\n      };\n    case 'UPDATE_LIST_TITLE':\n      // update the title of a particular list\n      // listId: numerical ID of the list in question\n      // newTitle: updated title\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.listId) {\n          return {...list, title: action.newTitle}\n        } else {\n          return list\n        }\n      })};\n    case 'MOVE_TODO':\n      // used for react-beautiful-dnd to actually move the \n      //   items from one list to another\n      // sourceList: numerical ID of list where drag began\n      // sourceIndex: index of position when drag began\n      // destList: numerical ID of list where drag ended\n      // destIndex: index of position when drag ended\n      let movedItem = state.lists.find(\n        list => list.id === action.payload.sourceList\n      ).items.splice(\n        action.payload.sourceIndex, 1\n      );\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.payload.destList) {\n          return {\n            ...list,\n            items: list.items.slice(0,action.payload.destIndex).concat(movedItem).concat(list.items.slice(action.payload.destIndex, list.items.length)),\n          }\n        } else {\n          return list\n        }\n      })};\n    default:\n      return state;\n  }\n}\n\nexport const initialState = {\n  lists: [\n    {id:'m',title:\"Monday\", items: [], isTitleEdit:false},\n    {id:'t',title:\"Tuesday\", items: [], isTitleEdit:false},\n    {id:'w',title:\"Wednesday\", items: [], isTitleEdit:false},\n    {id:'r',title:\"Thursday\", items: [], isTitleEdit:false},\n    {id:'f',title:\"Friday\", items: [], isTitleEdit:false},\n    {id:'s',title:\"Saturday\", items: [], isTitleEdit:false},\n    {id:'u',title:\"Sunday\", items: [], isTitleEdit:false},\n  ],\n  items: {},\n  freeIds: [],\n  nextId: 0,\n}\n\nexport const StateDispatchContext = React.createContext(null);\n","import React from 'react'\nimport Editlabel from './Editlabel';\nimport {Draggable} from 'react-beautiful-dnd';\nimport {StateDispatchContext} from './stateManager.js';\n\n// A single todo item. Editable (with Editlabel), and draggable, onto any <Todolist /> \n//\n// props:\n//  id: integer, unique on the page, for manipulating in\n//        top-level state\n//  itemObject: the item object that contains this Todo's \n//      id, content, and isEdit status\n//  onChange: function ref, passed down to child Editlabel for\n//            controlling the input when editing content\n//  onDeleteClick: function ref, passed from parent Todolist,\n//      for deleting this todo from top-level state\n\nconst Itemmenu = (props) => {\n  return (\n    <button\n      className=\"item-menu\"\n      autoFocus={true}\n      style={{ top: props.posY, left: props.posX }}\n      onClick={props.onClick}\n      onBlur={props.onBlur}\n    >Delete</button>\n  );\n};\n\nconst Listitem = (props) => {\n  // State hooks\n  const [contextMenu, setContextMenu] = React.useState([0,0,false]);\n\n  // Context consumers\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  // assigning props\n  const setIsEdit = (id, newState) => {\n    stateDispatch({\n      type: \"SET_IS_EDIT\",\n      itemId: props.id,\n      newState: !props.itemObject.isEdit,\n    });\n  };\n\n  const DeleteButton = () => {\n    return (\n        <button\n          className=\"deleteItemButton list-item-objects\"\n          onClick={event => setContextMenu([event.pageX, event.pageY, !contextMenu[2]])}\n        >\n        {String.fromCharCode(9899) + ' ' + String.fromCharCode(9899) + ' ' + String.fromCharCode(9899)}\n        </button>\n    );\n  };\n\n  const Container = (props) => {\n    return (\n      <Draggable \n        key={props.id}\n        draggableId={props.id.toString()} \n        index={parseInt(props.index)}\n      >\n        {(provided) => (\n          <div \n            className=\"list-item\" \n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            {props.children}\n          </div>\n        )}\n      </Draggable>\n    );\n  };\n\n  return (\n      <Container id={props.id} index={parseInt(props.index)}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.id}\n          content={props.itemObject.content}\n          isEdit={props.itemObject.isEdit}\n          onChange={props.onChange}\n          setIsEdit={setIsEdit}\n        />\n        <DeleteButton />\n        {contextMenu[2] && \n          <Itemmenu\n            posX={contextMenu[0]}\n            posY={contextMenu[1]}\n            onClick={props.onDeleteClick}\n          onBlur={event => setContextMenu([0,0,!contextMenu])}\n          />\n        }\n      </Container>\n  );\n};\n\nexport default Listitem;\n","import React from 'react';\nimport Editlabel from './Editlabel';\nimport Listitem from './Listitem';\nimport { StateDispatchContext } from './stateManager.js';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Todolist = (props) => {\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  const changeItem = (id, newContent) => {\n    stateDispatch({\n      type: 'UPDATE_TODO_CONTENT',\n      itemId: id,\n      content: newContent,\n    });\n  };\n\n  const removeItem = (id) => {\n    stateDispatch({\n      type: 'REMOVE_TODO',\n      listId: props.id,\n      itemId: id,\n    });\n  };\n\n  const handleAdditemClick = () => {\n    stateDispatch({\n      type: 'ADD_TODO',\n      listId: props.id,\n    });\n  };\n\n  const setTitleEdit = (newContent) => {\n    stateDispatch({\n      type: 'SET_LIST_TITLE_IS_EDIT',\n      listId: props.id,\n      newState: !props.list.isTitleEdit,\n    });\n  };\n\n  const changeListTitle = (id, content) => {\n    stateDispatch({\n      type: 'UPDATE_LIST_TITLE',\n      listId: props.id,\n      newTitle: content,\n    });\n  };\n\n  const renderedItems = (\n    props.list.items.map( (item, index) => (\n      <Listitem\n        key={item}\n        id={item}\n        index={index}\n        itemObject={props.todoState.items[item]}\n        onChange={changeItem}\n        onDeleteClick={() => removeItem(item)}\n      />\n    ))\n  );\n\n  const Container = (props) => {\n    return (\n      <div className={`${props.thisClass}-individual`}>\n        {props.children}\n      </div>\n    );\n  };\n\n  const Title = () => {\n    return (\n      <div className={`${props.thisClass}-individual-title`}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.list.id}\n          content={props.list.title}\n          onChange={changeListTitle}\n          isEdit={props.list.isTitleEdit}\n          setIsEdit={setTitleEdit}\n        />\n      {props.canDelete &&\n        <button\n          className=\"list-delete-button\"\n          onClick={props.onDeleteClick}\n        >X</button>\n      }\n      </div>\n    );\n  };\n\n  const List = () => {\n    \n    return (\n      <Droppable droppableId={props.list.id + ''}>\n        { (provided) => (\n          <div \n            ref={provided.innerRef} \n            {...provided.droppableProps}\n            className={`${props.thisClass}-list`}\n          >\n            {renderedItems}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n\n  const AddButton = () => {\n    return (\n      <button\n        className={\"addItemButton\"}\n        style={{ fontsize: '2rem' }}\n        onClick={handleAdditemClick}\n      >{\"+\"}</button>\n    );\n  };\n\n  return (\n    <Container thisClass={props.thisClass} key={`listcontainer-${props.list.id}`}>\n      <Title key={`listtitle-${props.list.id}`}/>\n      <List key={`listcontent-${props.list.id}`}/>\n      <AddButton key={`addtodobutton=${props.list.id}`}/>\n    </Container>\n  );\n};\n\nexport default Todolist;\n","import React from 'react';\nimport Todolist from './Todolist';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport {StateDispatchContext} from './stateManager.js';\nimport './Todoboard.css';\n\nconst Todoboard = (props) => {\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  const addList = () => {\n    stateDispatch({\n      type: 'ADD_LIST',\n    });\n  };\n\n  const removeList = (listId) => {\n    // remove a lists items first to prevent orphaned data\n    // - remember items on lists are just id's!\n    // - this is not optimal, the reducer calls .map()\n    //   on the list once for each item, but good enough\n    //   for now\n    props.todoState.lists.map( list => {\n      if (list.id === listId) {\n        list.items.forEach( item => {\n          stateDispatch({\n            type: 'REMOVE_TODO',\n            itemId: item,\n          });\n        });\n      }\n      return list\n    });\n    stateDispatch({type: 'REMOVE_LIST', listId: listId});\n  };\n\n  const AddListButton = () => {\n    return (\n      <span\n        className=\"addListButton\"\n        onClick={addList}\n      >{\"+ Add list\"}</span>\n    );\n  };\n\n  const ListContainer = (props) => {\n    return (\n        <div className={`${props.thisClass}-container`}>\n          {props.children}\n        </div>\n    );\n  };\n\n  const onDragEnd = ({source, destination}) => {\n    if (source === null || destination === null) return;\n    stateDispatch({\n      type: 'MOVE_TODO',\n      payload: {\n        sourceList: source.droppableId,\n        sourceIndex: source.index,\n        destList: destination.droppableId,\n        destIndex: destination.index,\n      },\n    });\n  };\n\n  const renderedItems = (\n    props.todoState.lists.map( (list, index) => (\n      <Todolist\n        thisClass={index <= 6 ? \"calendar\" : \"todo\"}\n        todoState={props.todoState}\n        list={list}\n        index={index}\n        id={list.id + ''}\n        key={list.id}\n        canDelete={index <= 6 ? false : true}\n        canEditTitle={false}\n        onDeleteClick={() => removeList(list.id)}\n      />\n    ))\n  );\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <ListContainer \n        thisClass=\"calendar\" \n        key=\"calendarcontainer\"\n      >\n        {[...renderedItems.slice(0,7)]}\n      </ListContainer>\n      <hr style={{width: \"90vw\", color: \"#eee\"}}/>\n      <ListContainer thisClass=\"todo\" key=\"todolistcontainer\">\n        {[...renderedItems.slice(7,renderedItems.length)]}\n        <AddListButton key=\"addlistbutton\" />\n      </ListContainer>\n    </DragDropContext>\n  )\n};\n\nexport default Todoboard;\n","import React from 'react';\nimport './Navbar.css';\nimport {StateDispatchContext} from './stateManager.js';\n\nconst SettingsMenu = (props) => {\n\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  const [isExportShowing, setIsExportShowing] = React.useState(false);\n  const [isImportShowing, setIsImportShowing] = React.useState(false);\n\n  const clearAll = () => {\n    if (window.confirm(\"Clear all? This will erase the entire board!!\")) {\n      stateDispatch({\n        type: 'CLEAR_STATE',\n      });\n    }\n  };\n\n  return (\n    <div\n      className=\"settings-menu-overlay\"\n      onClick={event => {\n        console.log(\"Clicked outside menu\")\n        props.setSettingsMenuProps([0,0,false])\n      }}\n    >\n    <ul\n      className=\"settings-menu\"\n      onClick={event => event.stopPropagation()}\n      style={{ top: props.posY, left: props.posX }}\n    >\n      <li \n        className=\"settings-menu-item\"\n        onClick={event => {\n          setIsExportShowing(true)\n          setIsImportShowing(false)\n        }}\n      >Export</li>\n      <li \n        className=\"settings-menu-item\"\n        onClick={event => {\n          setIsExportShowing(false)\n          setIsImportShowing(true)\n        }}\n      >Import</li>\n      <li\n        className=\"settings-menu-item\"\n        onClick={clearAll}\n      >Clear All</li>\n\n    </ul>\n      {isExportShowing &&\n        <ExportDisplay content={props.todoState}/>\n      }\n      {isImportShowing &&\n        <ImportDisplay setIsImportShowing={setIsImportShowing}/>\n      }\n    </div>\n  );\n}\n\nconst ExportDisplay = (props) => {\n  return (\n    <div \n      className=\"export-display\"\n    >\n      <textarea \n        className=\"export-content\"\n        onClick={event => event.stopPropagation()}\n        defaultValue={btoa(JSON.stringify(props.content))}\n      ></textarea>\n      <div className=\"export-buttons\">\n        <span>Close</span>\n      </div>\n    </div>\n  );\n}\n\nconst ImportDisplay = (props) => {\n  const stateDispatch = React.useContext(StateDispatchContext);\n  const [importData, setImportData] = React.useState(\"\");\n\n  const importClick = (event) => {\n    if (window.confirm(\"Import? This will erase all your current data!!\")) {\n      stateDispatch({\n        type: 'LOAD_NEW_STATE',\n        newState: JSON.parse(atob(importData)),\n      });\n      props.setIsImportShowing(false);\n    }\n  };\n\n  const cancelClick = () => {\n    props.setIsImportShowing(false);\n  };\n\n  return (\n    <div \n      className=\"export-display\"\n    >\n      <textarea \n        className=\"export-content\"\n        onClick={event => event.stopPropagation()}\n        value={importData}\n        onChange={event => setImportData(event.target.value)}\n      >\n      </textarea>\n      <div style={{margin: \"auto\"}} onClick={event => event.stopPropagation()}>\n        <span \n          className=\"export-buttons\"\n          onClick={cancelClick}\n        >Cancel</span>\n        <span \n          className=\"export-buttons\"\n          onClick={event => importClick(event)}\n        >Import</span>\n      </div>\n    </div>\n  );\n}\n      \n\nconst Navbar = (props) => {\n  const [settingsMenuProps, setSettingsMenuProps] = React.useState([0,0,false]);\n\n  return(\n    <div className=\"navbar\">\n      <span\n        className=\"navbar-title navbar-item\"\n      >List Reactor</span>\n      <span\n        className=\"navbar-settings navbar-item\"\n        onClick={event => setSettingsMenuProps([event.target.offsetLeft, event.target.offsetTop, !settingsMenuProps[2]])}\n      >Settings</span>\n      {settingsMenuProps[2] &&\n        <SettingsMenu\n          posX={settingsMenuProps[0]-10}\n          posY={settingsMenuProps[1]+35}\n          todoState={props.todoState}\n          setSettingsMenuProps={setSettingsMenuProps}\n        />\n      }\n\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from 'react';\nimport Todoboard from './Todoboard';\nimport {initialState, stateReducer, StateDispatchContext} from './stateManager.js';\nimport Navbar from './Navbar';\nimport './App.css';\n\nconst App = () => {\n\n  // reducer hook for managing state\n  const [todoState, stateDispatch] = React.useReducer(stateReducer, JSON.parse(localStorage.getItem('listreactor-state')) || initialState);\n\n  React.useEffect( () => {\n    localStorage.setItem('listreactor-state', JSON.stringify(todoState));\n  }, [todoState]);\n\n  const Container = (props) => {\n    return (\n      <StateDispatchContext.Provider value={stateDispatch}>\n        <Navbar todoState={todoState} />\n        <div className=\"app\">\n          {props.children}\n        </div>\n      </StateDispatchContext.Provider>\n    );\n  };\n\n  return (\n    <Container>\n      <Todoboard todoState={todoState} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}