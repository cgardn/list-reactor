{"version":3,"sources":["Todoboard.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Itemmenu","props","className","autoFocus","style","top","posY","left","posX","onClick","onBlur","Editlabel","React","useState","isEdit","setIsEdit","onSubmit","event","preventDefault","class","value","content","onChange","id","target","Listitem","contextMenu","setContextMenu","pageX","pageY","String","fromCharCode","onDeleteClick","Todolist","listContent","setListContent","listTitle","setListTitle","changeItem","newContent","map","item","handleAdditemClick","concat","getId","length","index","key","n","slice","fontsize","Todoboard","lists","setLists","nextItemId","setNextItemId","outId","list","title","utils","monthNames","dayNames","thisMonth","Date","getMonth","Day","today","number","day","Datedisplay","weekstart","weekend","year","Weekswitcher","previousWeek","month","handleReturnToToday","nextWeek","Week","dateProp","week","date","setDate","getDate","getDay","i","push","currentDay","weekNums","displayDay","Calendar","setDisplayDay","getWeekStart","thisDate","getWeekEnd","getFullYear","App","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7746d74.chunk.js","sourcesContent":["import React from 'react';\nimport './Todoboard.css';\n\n// TODO-next steps\n//  - limit number of lists before bumping to next line\n//  - top-level todoboard state is shallow, doesn't include\n//    list items, need top-level state object that includes\n//    everything, including all items assigned to whatever\n//    date\n//  - work on dragging items around\n//    - make list items draggable\n//    - make calendar days drag targets\n\nconst Itemmenu = (props) => {\n  return (\n    <button\n      className=\"item-menu\"\n      autoFocus={true}\n      style={{ top: props.posY, left: props.posX }}\n      onClick={props.onClick}\n      onBlur={props.onBlur}\n    >Delete</button>\n  );\n};\n\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box on click\n  // - receives content of box or span as a prop\n  // - receives id as prop, to be sent back to parent onChange, to change correct list item content\n  // - receives function references as props:\n  //    + change function for lifting state back up to parent \n  const [isEdit, setIsEdit] = React.useState(false);\n\n  return (\n    <>\n    {isEdit === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            setIsEdit(false)}\n          }\n        >\n          <input\n            className={props.class}\n            value={props.content}\n            autoFocus={true}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => setIsEdit(false)}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.class}\n          onClick={event => setIsEdit(true)}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nconst Listitem = (props) => {\n  const [contextMenu, setContextMenu] = React.useState([0,0,false]);\n\n  return (\n    <div\n      className=\"list-item\"\n    >\n      <Editlabel\n        class={\"list-item-objects list-item-label\"}\n        id={props.id}\n        content={props.content}\n        onChange={props.onChange}\n      />\n      <button\n        className=\"deleteItemButton list-item-objects\"\n        onClick={event => setContextMenu([event.pageX, event.pageY, !contextMenu[2]])}\n      >\n      {String.fromCharCode(9899) + String.fromCharCode(9899) + String.fromCharCode(9899)}\n      </button>\n      {contextMenu[2] && \n        <Itemmenu\n          posX={contextMenu[0]}\n          posY={contextMenu[1]}\n          onClick={props.onDeleteClick}\n          onBlur={event => setContextMenu([0,0,!contextMenu])}\n        />\n      }\n    </div>\n  );\n};\n\nconst Todolist = (props) => {\n  const [listContent, setListContent] = React.useState([]);\n  const [listTitle, setListTitle] = React.useState(\"New List\");\n\n  const changeItem = (id, newContent) => {\n    setListContent(listContent.map( (item) => \n      item.id === id \n        ? {id: item.id, content: newContent}\n        : item\n    ))\n  };\n\n  const removeItem = (n) => {\n    setListContent(listContent.slice(0,n).concat(listContent.slice(n+1,listContent.length)));\n  };\n\n  const newItem = (content) => {\n    return {\n      content: content,\n      id: props.getId(),\n    };\n  };\n\n  const handleAdditemClick = () => {\n    setListContent(listContent.concat(newItem(\"Click to edit\", true)));\n  };\n\n  const changeListTitle = (id, content) => {\n    setListTitle(content);\n  };\n\n  return (\n    <div className=\"list\">\n      <div className=\"title\">\n        <Editlabel\n          class={\"list-title\"}\n          id={props.id}\n          content={listTitle}\n          onChange={changeListTitle}\n        />\n        <button\n          className=\"list-delete-button\"\n          onClick={props.onDeleteClick}\n        >X</button>\n      </div>\n      {listContent.length > 0 &&\n      <div className=\"list-content\">\n        {listContent.map( (item, index) => (\n          <Listitem\n            key={item.id}\n            id={item.id}\n            content={item.content}\n            onChange={changeItem}\n            onDeleteClick={() => removeItem(index)}\n          />\n        ))}\n      </div>\n      }\n      \n        <button\n          className={\"addItemButton\"}\n          style={{ fontsize: '2rem' }}\n          onClick={event => handleAdditemClick()}\n        >{\"+ Add an item\"}</button>\n    </div>\n  );\n};\n\nconst Todoboard = (props) => {\n  const [lists, setLists] = React.useState([]);\n  const [nextItemId, setNextItemId] = React.useState(0);\n\n  const getId = () => {\n    const outId = nextItemId;\n    setNextItemId(nextItemId + 1);\n    return outId;\n  };\n  \n  const newList = () => {\n    const outList = {\n      title: \"New List\",\n      id: getId(),\n    };\n    return outList;\n  };\n\n  const addList = () => {\n    setLists(lists.concat(newList()));\n  };\n\n  const removeList = (n) => {\n    setLists(lists.slice(0,n).concat(lists.slice(n+1,lists.length)));\n  };\n  \n  return (\n    <div className=\"todoboard\">\n    {lists.length > 0 &&\n      <>\n      {lists.map( (list, index) => (\n        <Todolist\n          key={list.id}\n          id={list.id}\n          getId={getId} \n          onDeleteClick={() => removeList(index)}\n        />\n      ))}\n      </>\n    }\n\n    <button\n      className=\"addListButton\"\n      onClick={addList}\n    >{\"+ Add another list\"}</button>\n    </div>\n  )\n};\n\nexport default Todoboard;\n","import React from 'react';\nimport './Calendar.css';\n\n// TODO-next steps\n//  - eventually make the week display a button that pops\n//    out one of those mini-calendars for selecting a week\n\nconst utils = {\n  monthNames: [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November',\n    'December'\n  ],\n  dayNames: [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n  ],\n\n  thisMonth: () => {\n    const d = new Date();\n    return d.getMonth();\n  },\n};\n\nconst Day = (props) => {\n  return (\n    <div className={\n      props.today ? \"calendar-day calendar-day-today\" : \"calendar-day\"}>\n      <div className=\"calendar-day-number\">\n        {props.number}\n      </div>\n      <div className=\"calendar-day-name\">\n        {utils.dayNames[props.day]}\n      </div>\n    </div>\n  );\n};\n\nconst Datedisplay = (props) => {\n  return (\n    <div className=\"datedisplay\">\n      {utils.monthNames[props.weekstart[0]]} {props.weekstart[1]} - {utils.monthNames[props.weekend[0]]} {props.weekend[1]}, {props.year}\n    </div>\n  );\n};\n\nconst Weekswitcher = (props) => {\n  return (\n    <div className=\"week-switch-container\">\n      <div\n        className=\"week-switch-button\"\n        onClick={props.previousWeek}\n      >{'\\u25C4'}</div>\n      <Datedisplay\n        month={props.month}\n        year={props.year}\n        weekstart={props.weekstart}\n        weekend={props.weekend}/>\n      <button\n        onClick={props.handleReturnToToday}\n      >Back to current week</button>\n      <div\n        className=\"week-switch-button\"\n        onClick={props.nextWeek}\n      >{'\\u25BA'}</div>\n    </div>\n  );\n};\n\nconst Week = (props) => {\n  // receives current day, returns list of <Day /> with \n  // correct numbering\n  \n  const weekNums = (dateProp) => {\n    // takes today's date number, returns date numbers for this week from Sunday to Saturday, as an array\n    //   purpose: use the Date object's functions so month boundaries are handled correctly\n    let week = [];\n    let date = new Date(dateProp);\n\n    // set day to Sunday before loop\n    date.setDate(date.getDate()-date.getDay());\n    for (let i=0; i<7;i++) {\n      week.push([date.getDate(), \n        (props.currentDay.getDate() === date.getDate()) &&\n         (props.currentDay.getMonth() === date.getMonth())])\n      date.setDate(date.getDate()+1);\n    }\n    return week;\n  };\n\n  return (\n    <>\n    <div className=\"calendar-container\">\n      {weekNums(props.displayDay).map( (item, index) => (\n        <Day\n          key={index+1}\n          number={item[0]}\n          today={item[1]}\n          day={index}\n        />\n      ))}\n    </div>\n    </>\n  );\n};\n\nconst Calendar = (props) => {\n  const [currentDay] = React.useState(new Date());\n  const [displayDay, setDisplayDay] = React.useState(new Date());\n\n  const handlePreviousWeek = () => {\n    setDisplayDay(new Date(displayDay.setDate(displayDay.getDate()-7)));\n  };\n\n  const handleNextWeek = () => {\n    setDisplayDay(new Date(displayDay.setDate(displayDay.getDate()+7)));\n  };\n\n  const handleReturnToToday = () => {\n    setDisplayDay(new Date(currentDay));\n  };\n\n  const getWeekStart = (today) => {\n    // returns date object set to beginning of the week\n    let thisDate = new Date(today);\n    thisDate.setDate(today.getDate()-today.getDay());\n    return thisDate;\n  };\n\n  const getWeekEnd = (today) => {\n    let thisDate = new Date(today);\n    thisDate.setDate((thisDate.getDate()-thisDate.getDay())+6);\n    return thisDate;\n  };\n\n  return (\n    <div className=\"calendar\">\n    <Weekswitcher\n      previousWeek={handlePreviousWeek}\n      nextWeek={handleNextWeek}\n      handleReturnToToday={handleReturnToToday}\n      year={currentDay.getFullYear()}\n      weekstart={[\n        getWeekStart(displayDay).getMonth(),\n        getWeekStart(displayDay).getDate()]}\n      weekend={[\n        getWeekEnd(displayDay).getMonth(),\n        getWeekEnd(displayDay).getDate()]}\n    />\n    <Week \n      displayDay={displayDay}\n      currentDay={currentDay}\n      day={displayDay.getDay()}\n    />\n    </div>\n  );\n};\nexport default Calendar;\n","import React from 'react';\nimport Todoboard from './Todoboard';\nimport Calendar from './Calendar';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Calendar />\n      <hr style={{width: \"90vw\"}}/>\n      <Todoboard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}