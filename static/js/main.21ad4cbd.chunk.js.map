{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Editlabel","props","React","useState","isEdit","setIsEdit","onSubmit","event","preventDefault","className","class","value","content","autoFocus","onChange","id","target","onBlur","onClick","Listitem","onItemMenuClick","String","fromCharCode","Todolist","listContent","setListContent","listTitle","setListTitle","changeItem","newContent","map","item","handleAdditemClick","concat","getId","length","index","key","onDeleteClick","n","slice","style","fontsize","Board","lists","setLists","nextItemId","setNextItemId","outId","list","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21ad4cbd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst Itemmenu = () => {\n  return (\n    <span \n      class=\"item-menu\"\n    >Test item menu</span>\n  );\n};\n\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box on click\n  // - receives content of box or span as a prop\n  // - receives id as prop, to be sent back to parent onChange, to change correct list item content\n  // - receives function references as props:\n  //    + change function for lifting state back up to parent \n  const [isEdit, setIsEdit] = React.useState(false);\n\n  return (\n    <>\n    {isEdit === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            setIsEdit(false)}\n          }\n        >\n          <input\n            className={props.class}\n            value={props.content}\n            autoFocus={true}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => setIsEdit(false)}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.class}\n          onClick={event => setIsEdit(true)}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nconst Listitem = (props) => {\n  return (\n    <div\n      className=\"list-item\"\n    >\n      <Editlabel\n        className={`todo-${props.id}`}\n        id={props.id}\n        content={props.content}\n        onChange={props.onChange}\n      />\n      <button\n        className=\"deleteItemButton\"\n        onClick={props.onItemMenuClick}\n      >\n      {String.fromCharCode(9899) + String.fromCharCode(9899) + String.fromCharCode(9899)}\n      </button>\n    </div>\n  );\n};\n\nconst Todolist = (props) => {\n  const [listContent, setListContent] = React.useState([]);\n  const [listTitle, setListTitle] = React.useState(\"New List\");\n\n  const changeItem = (id, newContent) => {\n    setListContent(listContent.map( (item) => \n      item.id === id \n        ? {id: item.id, content: newContent}\n        : item\n    ))\n  };\n\n  const removeItem = (n) => {\n    setListContent(listContent.slice(0,n).concat(listContent.slice(n+1,listContent.length)));\n  };\n\n  const newItem = (content) => {\n    return {\n      content: content,\n      id: props.getId(),\n    };\n  };\n\n  const handleAdditemClick = () => {\n    setListContent(listContent.concat(newItem(\"Edit me\", true)));\n  };\n\n  const changeListTitle = (id, content) => {\n    setListTitle(content);\n  };\n\n  return (\n    <div className=\"list\">\n      <div className=\"title\">\n        <Editlabel\n          class={\"list-title\"}\n          id={props.id}\n          content={listTitle}\n          onChange={changeListTitle}\n        />\n      </div>\n      {listContent.length > 0 &&\n      <div className=\"list-content\">\n        {listContent.map( (item, index) => (\n          <Listitem\n            key={item.id}\n            id={item.id}\n            content={item.content}\n            onChange={changeItem}\n            onDeleteClick={() => removeItem(index)}\n          />\n        ))}\n      </div>\n      }\n      \n        <button\n          className={\"addItemButton\"}\n          style={{ fontsize: '2rem' }}\n          onClick={event => handleAdditemClick()}\n        >{\"+ Add an item\"}</button>\n    </div>\n  );\n};\n\nconst Board = (props) => {\n  const [lists, setLists] = React.useState([]);\n  const [nextItemId, setNextItemId] = React.useState(0);\n\n  const getId = () => {\n    const outId = nextItemId;\n    setNextItemId(nextItemId + 1);\n    return outId;\n  };\n  \n\n  const newList = () => {\n    const outList = {\n      title: \"New List\",\n      id: getId(),\n    };\n    return outList;\n  };\n\n  const addList = () => {\n    setLists(lists.concat(newList()));\n  };\n  \n  return (\n    <>\n    {lists.length > 0 &&\n      <>\n      {lists.map( (list) => (\n        <Todolist\n          key={list.id}\n          id={list.id}\n          getId={getId} \n        />\n      ))}\n      </>\n    }\n\n    <button\n      className=\"addListButton\"\n      onClick={addList}\n    >{\"+ Add another list\"}</button>\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <Board />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}