{"version":3,"sources":["Editlabel.js","stateManager.js","Listitem.js","Todolist.js","Todoboard.js","App.js","serviceWorker.js","index.js"],"names":["Editlabel","props","callbackRef","useCallback","inputBox","focus","isEdit","onSubmit","event","preventDefault","setIsEdit","className","value","content","ref","onChange","id","target","onBlur","onClick","stateReducer","state","action","console","log","getId","nextId","freeIds","length","pop","type","newTodo","items","lists","map","list","listId","concat","push","itemId","filter","item","newState","newList","title","toString","isTitleEdit","newTitle","movedItem","find","payload","sourceList","splice","sourceIndex","destList","slice","destIndex","initialState","StateDispatchContext","React","createContext","Itemmenu","autoFocus","style","top","posY","left","posX","Listitem","useState","contextMenu","setContextMenu","stateDispatch","useContext","DeleteButton","pageX","pageY","String","fromCharCode","Container","key","draggableId","index","parseInt","provided","innerRef","draggableProps","dragHandleProps","children","itemObject","onDeleteClick","Todolist","changeItem","newContent","handleAdditemClick","setTitleEdit","changeListTitle","renderedItems","todoState","thisClass","Title","canDelete","List","droppableId","droppableProps","placeholder","AddButton","fontsize","Todoboard","addList","removeList","forEach","AddListButton","ListContainer","onDragEnd","source","destination","canEditTitle","width","App","useReducer","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.331da094.chunk.js","sourcesContent":["import React from 'react';\nimport {useCallback} from 'react';\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box+form on click\n  // props:\n  //  id: integer, unique to the app state for manipulating \n  //      the label inside state object\n  //  content: string, displayed text on the label\n  //  class: for setting className (CSS styles)\n  //  isEdit: bool, true if in editable input state, false if\n  //          plain text span\n  //  setIsEdit: function ref for setting isEdit on parent\n  //  onChange: function ref for controlling input on parent\n  //            state\n\n  const callbackRef = useCallback(inputBox => {\n    if (inputBox) {\n      inputBox.focus();\n    }\n  }, []);\n\n  return (\n    <>\n    {props.isEdit === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            props.setIsEdit()\n          }}\n        >\n          <input\n            className={props.className}\n            value={props.content}\n            ref={callbackRef}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => props.setIsEdit()}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.className}\n          onClick={event => props.setIsEdit()}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nexport default Editlabel;\n","import React from 'react';\n\n// Data architecture:\n//  Two reducers:\n//  - listReducer: An array of JS Objects\n//      - id: Integer, unique within the application\n//      - title: String, title of the list\n//  - itemReducer: An array of item objects:\n//      - id: Integer, unique within the application\n//      - content: String, the actual todo-text input by user\n//      - isEdit: boolean, controls edit mode on Todos\n//\n// \n//  There are a handful of properties that don't get stored\n//    in the reducer, for example whether a list can be \n//    deleted - hardcoded to off for the weekdays, and\n//    on for everything else. May change in the future.\n//\n//  The board is constructed by referencing both reducers to\n//    get the lists and their items, pulling item content out\n//    of the item reducer along the way.\n\n\nexport const stateReducer = (state, action) => {\n  console.log(\"stateReducer\", action);\n  const getId = () => {\n    console.log(\"getId\", action, state.nextId, state);\n    return (state.freeIds.length > 0)\n      ? state.freeIds.pop()\n      : state.nextId++\n  };\n\n  // item management\n  switch(action.type) {\n    case 'ADD_TODO':\n      // add a new todo to the item object and a particular\n      //    list, with new ID from getId()\n      // listId: id of the list where the new item will be\n      //          appended\n      const newTodo = {\n        id: getId(),\n        content: \"Click to edit\",\n        isEdit: true,\n      }\n      return {\n        ...state,\n        items: {\n          ...state.items,\n          [newTodo.id]: newTodo\n        },\n        lists: state.lists.map( list => {\n          if (list.id === action.listId) {\n            return {\n              ...list,\n              // just add it to the end of the list for now\n              items: list.items.concat(newTodo.id)\n            };\n          } else {\n            return list\n          };\n        }),\n      };\n    case 'REMOVE_TODO':\n      // remove item from item object and owning list,\n      //   put id into freeIds stack\n      // listID: list that has this item\n      // itemID: the item in question\n\n      // add ID to freeIds stack\n      state.freeIds.push(action.itemId);\n      // remove item from item object\n      delete state.items[action.itemId]\n      // remap lists arrays without the deleted itemId\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.listId) {\n          return {...list, items: list.items.filter(\n            item => item !== action.itemId)}\n        } else {\n          return list\n        }\n      })};\n    case 'SET_IS_EDIT':\n      // turn edit mode on or off for a particular todo\n      // itemId: numerical ID of the item in question\n      // newState: true or false\n      return {...state,\n        items: {\n          ...state.items,\n          [action.itemId]: {\n              ...state.items[action.itemId],\n              isEdit: action.newState},\n        }\n      }\n    case 'UPDATE_TODO_CONTENT':\n      // set new content for a particular todo\n      //   whether controlled or uncontrolled\n      // itemId: item in question\n      // content: new content to set\n      return {...state, items: {...state.items, [action.itemId]: {...state.items[action.itemId], content: action.content}}}\n  // list management\n    case 'ADD_LIST':\n      // add a new list, get id from getIds()\n      // payload: new list\n      const newList = {\n        title: \"New List\",\n        id: getId().toString(),\n        items: [],\n      };\n      return {...state, lists: [...state.lists, newList]};\n    case 'REMOVE_LIST':\n      // remove a particular list, put id in freeIds stack\n      // listId: numerical ID of the list in question\n      state.freeIds.push(action.listId);\n      return {...state, lists: state.lists.filter(\n        list => list.id !== action.listId)\n      };\n    case 'SET_LIST_TITLE_IS_EDIT':\n      // turn edit mode on or off for a particular list title\n      // listId: numerical ID of the list in question\n      // newState: true or false\n      return {...state,\n        lists: state.lists.map( list => {\n          if (list.id === action.listId) {\n            list.isTitleEdit = action.newState; \n            return list\n          } else {\n            return list\n          }\n        }),\n      };\n    case 'UPDATE_LIST_TITLE':\n      // update the title of a particular list\n      // listId: numerical ID of the list in question\n      // newTitle: updated title\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.listId) {\n          return {...list, title: action.newTitle}\n        } else {\n          return list\n        }\n      })};\n    case 'MOVE_TODO':\n      // used for react-beautiful-dnd to actually move the \n      //   items from one list to another\n      // sourceList: numerical ID of list where drag began\n      // sourceIndex: index of position when drag began\n      // destList: numerical ID of list where drag ended\n      // destIndex: index of position when drag ended\n      let movedItem = state.lists.find(\n        list => list.id === action.payload.sourceList\n      ).items.splice(\n        action.payload.sourceIndex, 1\n      );\n      return {...state, lists: state.lists.map( list => {\n        if (list.id === action.payload.destList) {\n          return {\n            ...list,\n            items: list.items.slice(0,action.payload.destIndex).concat(movedItem).concat(list.items.slice(action.payload.destIndex, list.items.length)),\n          }\n        } else {\n          return list\n        }\n      })};\n    default:\n      return state;\n  }\n}\n\nexport const initialState = {\n  lists: [\n    {id:'m',title:\"Monday\", items: [], isTitleEdit:false},\n    {id:'t',title:\"Tuesday\", items: [], isTitleEdit:false},\n    {id:'w',title:\"Wednesday\", items: [], isTitleEdit:false},\n    {id:'r',title:\"Thursday\", items: [], isTitleEdit:false},\n    {id:'f',title:\"Friday\", items: [], isTitleEdit:false},\n    {id:'s',title:\"Saturday\", items: [], isTitleEdit:false},\n    {id:'u',title:\"Sunday\", items: [], isTitleEdit:false},\n  ],\n  items: {},\n  freeIds: [],\n  nextId: 0,\n}\n\nexport const StateDispatchContext = React.createContext(null);\n","import React from 'react'\nimport Editlabel from './Editlabel';\nimport {Draggable} from 'react-beautiful-dnd';\nimport {StateDispatchContext} from './stateManager.js';\n\n// A single todo item. Editable (with Editlabel), and draggable, onto any <Todolist /> \n//\n// props:\n//  id: integer, unique on the page, for manipulating in\n//        top-level state\n//  itemObject: the item object that contains this Todo's \n//      id, content, and isEdit status\n//  onChange: function ref, passed down to child Editlabel for\n//            controlling the input when editing content\n//  onDeleteClick: function ref, passed from parent Todolist,\n//      for deleting this todo from top-level state\n\nconst Itemmenu = (props) => {\n  return (\n    <button\n      className=\"item-menu\"\n      autoFocus={true}\n      style={{ top: props.posY, left: props.posX }}\n      onClick={props.onClick}\n      onBlur={props.onBlur}\n    >Delete</button>\n  );\n};\n\nconst Listitem = (props) => {\n  // State hooks\n  const [contextMenu, setContextMenu] = React.useState([0,0,false]);\n\n  // Context consumers\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  // assigning props\n  const setIsEdit = (id, newState) => {\n    stateDispatch({\n      type: \"SET_IS_EDIT\",\n      itemId: props.id,\n      newState: !props.itemObject.isEdit,\n    });\n  };\n\n  const DeleteButton = () => {\n    return (\n        <button\n          className=\"deleteItemButton list-item-objects\"\n          onClick={event => setContextMenu([event.pageX, event.pageY, !contextMenu[2]])}\n        >\n        {String.fromCharCode(9899) + ' ' + String.fromCharCode(9899) + ' ' + String.fromCharCode(9899)}\n        </button>\n    );\n  };\n\n  const Container = (props) => {\n    return (\n      <Draggable \n        key={props.id}\n        draggableId={props.id.toString()} \n        index={parseInt(props.index)}\n      >\n        {(provided) => (\n          <div \n            className=\"list-item\" \n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            {props.children}\n          </div>\n        )}\n      </Draggable>\n    );\n  };\n\n  return (\n      <Container id={props.id} index={parseInt(props.index)}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.id}\n          content={props.itemObject.content}\n          isEdit={props.itemObject.isEdit}\n          onChange={props.onChange}\n          setIsEdit={setIsEdit}\n        />\n        <DeleteButton />\n        {contextMenu[2] && \n          <Itemmenu\n            posX={contextMenu[0]}\n            posY={contextMenu[1]}\n            onClick={props.onDeleteClick}\n          onBlur={event => setContextMenu([0,0,!contextMenu])}\n          />\n        }\n      </Container>\n  );\n};\n\nexport default Listitem;\n","import React from 'react';\nimport Editlabel from './Editlabel';\nimport Listitem from './Listitem';\nimport { StateDispatchContext } from './stateManager.js';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Todolist = (props) => {\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  const changeItem = (id, newContent) => {\n    stateDispatch({\n      type: 'UPDATE_TODO_CONTENT',\n      itemId: id,\n      content: newContent,\n    });\n  };\n\n  const removeItem = (id) => {\n    stateDispatch({\n      type: 'REMOVE_TODO',\n      listId: props.id,\n      itemId: id,\n    });\n  };\n\n  const handleAdditemClick = () => {\n    console.log(\"handleAddItemClick\");\n    stateDispatch({\n      type: 'ADD_TODO',\n      listId: props.id,\n    });\n  };\n\n  const setTitleEdit = (newContent) => {\n    stateDispatch({\n      type: 'SET_LIST_TITLE_IS_EDIT',\n      listId: props.id,\n      newState: newContent,\n    });\n  };\n\n  const changeListTitle = (id, content) => {\n    stateDispatch({\n      type: 'UPDATE_LIST_TITLE',\n      listId: props.id,\n      newTitle: content,\n    });\n  };\n\n  const renderedItems = (\n    props.list.items.map( (item, index) => (\n      <Listitem\n        key={item}\n        id={item}\n        index={index}\n        itemObject={props.todoState.items[item]}\n        onChange={changeItem}\n        onDeleteClick={() => removeItem(item)}\n      />\n    ))\n  );\n\n  const Container = (props) => {\n    return (\n      <div className={`${props.thisClass}-individual`}>\n        {props.children}\n      </div>\n    );\n  };\n\n  const Title = () => {\n    return (\n      <div className={`${props.thisClass}-individual-title`}>\n        <Editlabel\n          className={\"list-item-objects list-item-label\"}\n          id={props.list.id}\n          content={props.list.title}\n          onChange={changeListTitle}\n          isEdit={props.list.isTitleEdit}\n          setIsEdit={setTitleEdit}\n        />\n      {props.canDelete &&\n        <button\n          className=\"list-delete-button\"\n          onClick={props.onDeleteClick}\n        >X</button>\n      }\n      </div>\n    );\n  };\n\n  const List = () => {\n    \n    return (\n      <Droppable droppableId={props.list.id + ''}>\n        { (provided) => (\n          <div \n            ref={provided.innerRef} \n            {...provided.droppableProps}\n            className={`${props.thisClass}-list`}\n          >\n            {renderedItems}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    );\n  };\n\n  const AddButton = () => {\n    return (\n      <button\n        className={\"addItemButton\"}\n        style={{ fontsize: '2rem' }}\n        onClick={handleAdditemClick}\n      >{\"+\"}</button>\n    );\n  };\n\n  return (\n    <Container thisClass={props.thisClass} key={`listcontainer-${props.list.id}`}>\n      <Title key={`listtitle-${props.list.id}`}/>\n      <List key={`listcontent-${props.list.id}`}/>\n      <AddButton key={`addtodobutton=${props.list.id}`}/>\n    </Container>\n  );\n};\n\nexport default Todolist;\n","import React from 'react';\nimport Todolist from './Todolist';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport {StateDispatchContext} from './stateManager.js';\nimport './Todoboard.css';\n\nconst Todoboard = (props) => {\n  const stateDispatch = React.useContext(StateDispatchContext);\n\n  const addList = () => {\n    stateDispatch({\n      type: 'ADD_LIST',\n    });\n  };\n\n  const removeList = (listId) => {\n    // remove a lists items first to prevent orphaned data\n    // - remember items on lists are just id's!\n    // - this is not optimal, the reducer calls .map()\n    //   on the list once for each item, but good enough\n    //   for now\n    props.todoState.lists.map( list => {\n      if (list.id === listId) {\n        list.items.forEach( item => {\n          stateDispatch({\n            type: 'REMOVE_TODO',\n            itemId: item,\n          });\n        });\n      }\n      return list\n    });\n    stateDispatch({type: 'REMOVE_LIST', listId: listId});\n  };\n\n  const AddListButton = () => {\n    return (\n      <button\n        className=\"addListButton\"\n        onClick={addList}\n      >{\"+ Add list\"}</button>\n    );\n  };\n\n  const ListContainer = (props) => {\n    return (\n      <div className={props.thisClass}>\n        <div className={`${props.thisClass}-container`}>\n          {props.children}\n        </div>\n      </div>\n    );\n  };\n\n  const onDragEnd = ({source, destination}) => {\n    if (source === null || destination === null) return;\n    stateDispatch({\n      type: 'MOVE_TODO',\n      payload: {\n        sourceList: source.droppableId,\n        sourceIndex: source.index,\n        destList: destination.droppableId,\n        destIndex: destination.index,\n      },\n    });\n  };\n\n  return (\n    <>\n    <DragDropContext onDragEnd={onDragEnd}>\n    <ListContainer thisClass=\"calendar\" key=\"calendarcontainer\">\n        {props.todoState.lists.map( (list, index) => (\n          (index <= 6) &&\n              <>\n              <Todolist\n                thisClass={\"calendar\"}\n                todoState={props.todoState}\n                list={list}\n                index={index}\n                id={list.id + ''}\n                key={list.id}\n                canDelete={false}\n                canEditTitle={false}\n                onDeleteClick={() => removeList(list.id)}\n              />\n              </>\n        ))}\n    </ListContainer>\n    <hr style={{width: \"90vw\"}}/>\n    <ListContainer thisClass=\"todo\" key=\"todolistcontainer\">\n        {props.todoState.lists.length > 0 &&\n          <>\n          {props.todoState.lists.map( (list, index) => (\n            (index > 6) && \n            <>\n             <Todolist\n                thisClass={\"todo\"}\n                todoState={props.todoState}\n                list={list}\n                index={index}\n                id={list.id}\n                key={list.id}\n                canDelete={true}\n                canEditTitle={true}\n                onDeleteClick={() => removeList(list.id)}\n             />\n            </>\n          ))}\n          </>\n        }\n        <AddListButton key=\"addlistbutton\" />\n    </ListContainer>\n    </DragDropContext>\n    </>\n  )\n};\n\nexport default Todoboard;\n","import React from 'react';\nimport Todoboard from './Todoboard';\nimport {initialState, stateReducer, StateDispatchContext} from './stateManager.js';\nimport './App.css';\n\nconst App = () => {\n\n  // reducer hook for managing state\n  const [todoState, stateDispatch] = React.useReducer(stateReducer, JSON.parse(localStorage.getItem('listreactor-state')) || initialState);\n\n  React.useEffect( () => {\n    localStorage.setItem('listreactor-state', JSON.stringify(todoState));\n  }, [todoState]);\n\n  const Container = (props) => {\n    return (\n      <StateDispatchContext.Provider value={stateDispatch}>\n        <div className=\"app\">\n          {props.children}\n        </div>\n      </StateDispatchContext.Provider>\n    );\n  };\n\n  return (\n    <Container>\n      <Todoboard todoState={todoState} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}