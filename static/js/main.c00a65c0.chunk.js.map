{"version":3,"sources":["Editlabel.js","Listitem.js","Todoboard.js","App.js","serviceWorker.js","index.js"],"names":["Editlabel","props","React","useState","canEdit","titleEdit","onSubmit","event","preventDefault","className","class","value","content","autoFocus","onFocus","target","select","onChange","id","onBlur","onClick","Itemmenu","style","top","posY","left","posX","Listitem","contextMenu","setContextMenu","isEdit","setIsEdit","isPlaceholder","setIsPlaceholder","handleDragOver","stopPropagation","handleDragEnd","onDragEnd","onDragOver","draggable","onDragStart","data","JSON","stringify","overIndex","index","itemId","dragDispatch","type","payload","dataTransfer","setData","console","log","getData","pageX","pageY","String","fromCharCode","onDeleteClick","Todolist","listDispatch","useContext","ListDispatchContext","itemDispatch","ItemDispatchContext","isTitleEdit","setTitleEdit","changeItem","newContent","handleSwapItems","parse","thisClass","title","canEditTitle","canDelete","onDragEnter","draggedItem","newOwner","getSize","items","filter","item","belongsTo","sort","a","b","map","key","swapItems","fontsize","getId","listReducer","state","action","list","listId","itemReducer","dragReducer","createContext","initialListState","initialItemState","initialDragState","Todoboard","useReducer","lists","startId","nextItemId","setNextItemId","outId","removeList","getListSize","length","Provider","width","nl","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c00a65c0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Editlabel = (props) => {\n  // Editable label, a span that replaces itself with an Input box+form on click\n  // props:\n  //  id: integer, unique to the app state for manipulating \n  //      the label inside state object\n  //  content: string, displayed text on the label\n  //  class: for setting className (CSS styles)\n  //  isEdit: bool, true if in editable input state, false if\n  //          plain text span\n  //  setIsEdit: function ref for setting isEdit on parent\n  //  canEdit: bool for turning off click-to-edit,\n  //            mainly used for non-editable titles on the \n  //            weekday lists\n  //  onChange: function ref for controlling input on parent\n  //            state\n  const canEdit = React.useState(props.canEdit || true);\n\n  return (\n    <>\n    {props.titleEdit[0] === true\n      ? <form \n          onSubmit={event => {\n            event.preventDefault()\n            props.titleEdit[1](false)}\n          }\n        >\n          <input\n            className={props.class}\n            value={props.content}\n            autoFocus={true}\n            onFocus={event => event.target.select()}\n            onChange={event => props.onChange(props.id, event.target.value)}\n            onBlur={event => props.titleEdit[1](false)}\n          >\n          </input>\n        </form>\n      : <span \n          className={props.class}\n          onClick={event => props.titleEdit[1](true)}\n        >{props.content}</span>\n    }\n    </>\n  );\n};\n\nexport default Editlabel;\n","import React from 'react'\nimport Editlabel from './Editlabel';\n\n\n// A single todo item. Editable (with Editlabel), and draggable, onto any <Todolist /> \n//\n// props:\n//  id: integer, unique on the page, for manipulating in\n//        top-level state\n//  content: string, the text content of the todo, passed down\n//            from top-level state\n//  onChange: function ref, passed down to child Editlabel for\n//            controlling the input when editing content\n//  onDeleteClick: function ref, passed from parent Todolist,\n//      for deleting this todo from top-level state\n\nconst Itemmenu = (props) => {\n  return (\n    <button\n      className=\"item-menu\"\n      autoFocus={true}\n      style={{ top: props.posY, left: props.posX }}\n      onClick={props.onClick}\n      onBlur={props.onBlur}\n    >Delete</button>\n  );\n};\n\nconst Listitem = (props) => {\n  // State hooks\n  const [contextMenu, setContextMenu] = React.useState([0,0,false]);\n  const [isEdit, setIsEdit] = React.useState(true);\n  const [isPlaceholder, setIsPlaceholder] = React.useState(false);\n\n  // Context consumers\n\n  const handleDragStart = (event) => {\n    const data = JSON.stringify( {\n      overIndex: props.index,\n      itemId: props.id,\n      content: props.content\n    });\n    setIsPlaceholder(true);\n    props.dragDispatch({\n      type: 'SET_DRAGGED_ITEM',\n      payload: {id: props.id}\n    });\n                \n    event.dataTransfer.setData('listItem', data);\n    console.log(event.dataTransfer.getData(\"listItem\"));\n  };\n\n  const handleDragOver = (event) => {\n    event.stopPropagation();\n  };\n\n  const handleDragEnd = (event) => {\n    setIsPlaceholder(false);\n  };\n\n  if (!isPlaceholder) {\n  return (\n    <div\n      className=\"list-item\"\n      draggable={isEdit ? \"false\" : \"true\"}\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      onDragOver={handleDragOver}\n    >\n      <Editlabel\n        class={\"list-item-objects list-item-label\"}\n        id={props.id}\n        content={props.content}\n        onChange={props.onChange}\n        isEdit={isEdit}\n        setIsEdit={setIsEdit}\n      />\n      <button\n        className=\"deleteItemButton list-item-objects\"\n        onClick={event => setContextMenu([event.pageX, event.pageY, !contextMenu[2]])}\n      >\n      {String.fromCharCode(9899) + ' ' + String.fromCharCode(9899) + ' ' + String.fromCharCode(9899)}\n      </button>\n      {contextMenu[2] && \n        <Itemmenu\n          posX={contextMenu[0]}\n          posY={contextMenu[1]}\n          onClick={props.onDeleteClick}\n          onBlur={event => setContextMenu([0,0,!contextMenu])}\n        />\n      }\n    </div>\n  );\n  } else {\n    return (\n      <div \n        className=\"list-item-placeholder\"\n        onDragEnd={handleDragEnd}\n        onDragOver={handleDragOver}\n      ></div>\n    );\n  }\n};\n\nexport default Listitem;\n","import React from 'react';\n\nimport Editlabel from './Editlabel';\nimport Listitem from './Listitem';\n\nimport './Todoboard.css';\n\n\n// TODO-next steps\n//\n//  IMMEDIATE/CURRENT\n//    - working on drag-to-reorder\n//      -> placeholder shadow works\n//      -> need way to track/update array order\n//      -> need to give listitems ondragenter and tie it up\n//          to the array order through the main reducer\n//\n//  - resize the lower lists, they're huge\n//    - eventually make them resizeable\n//  - make 3-dots on listitems a lot smaller\n//    - eventually make them an img so avoid the weird reflow\n//  - center the lower lists, but still build from left\n//  - make the addItemButtons into inputs that you type into\n//  - give addList button a permanent home somewhere\n//    - up top in header/toolbar when i get there\n//    - possibly floating in lower corner?\n//  - reorganize code, remove stuff that doesn't need to be\n//    here and compartmentalize things that don't need to\n//    know about each other\n//    - can probably move drag-and-drop stuff into its own\n//      wrapper component\n//    - look at main Todoboard component, its huge\n//    - code duplication in Todoboard render()\n//    - code duplication in Todolist render()\n// TODO-bugs\n//  - Editlabel inputs are different size than the labels,\n//    causing minor reflow when swapping modes\n//  - Listitems arent properly re-indexed when moved or\n//      deleted\n// TODO-things to remember to save when doing backend\n//  - list object minus edit states\n//  - current nextId for getId\n\nconst Todolist = (props) => {\n  const listDispatch = React.useContext(ListDispatchContext);\n  const itemDispatch = React.useContext(ItemDispatchContext);\n  const [isTitleEdit, setTitleEdit] = React.useState(false);\n\n  const handleDragOver = (event) => {\n    event.preventDefault();  \n    event.stopPropagation();\n    itemDispatch({\n      type: 'UPDATE_TODO_OWNER',\n      itemId: props.draggedItem.id,\n      newOwner: props.id,\n      index: props.getSize(props.id),\n    });\n  };\n\n  const changeItem = (id, newContent) => {\n    itemDispatch({\n      type: 'UPDATE_TODO_CONTENT',\n      itemId: id,\n      payload: newContent\n    });\n  };\n\n  const removeItem = (id) => {\n    itemDispatch({\n      type: 'REMOVE_TODO',\n      itemId: id,\n    });\n  };\n\n  const handleAdditemClick = () => {\n    itemDispatch({\n      type: 'ADD_TODO',\n      payload: {\n        id: props.getId(),\n        index: props.getSize(props.id),\n        belongsTo: props.id,\n        content: \"Click to edit\"}\n    });\n  };\n\n  const changeListTitle = (id, content) => {\n    listDispatch({\n      type: 'UPDATE_LIST_TITLE',\n      id: id,\n      payload: content\n    });\n  };\n\n  const handleSwapItems = (event) => {\n    const data = JSON.parse(event.dataTransfer.getData(\"listitem\"));\n    console.log(data);\n    /*\n    dispatch({\n      type: 'SWAP_TODOS',\n      overId: data.overId,\n      underId: data.underId,\n      listId: props.id\n    });\n    */\n  };\n\n  const getTitleEdit = () => {\n    if (props.canEditTitle) {\n      return [isTitleEdit, setTitleEdit]\n    } else {\n      return [false, () => {return;}]\n    }\n  };\n\n  return (\n    <>\n      <div className={`${props.thisClass}-individual-title`}>\n        <Editlabel\n          class={\"list-item-objects list-item-label\"}\n          id={props.id}\n          content={props.title}\n          onChange={changeListTitle}\n          titleEdit={getTitleEdit()}\n        />\n      \n      {props.canDelete &&\n        <button\n          className=\"list-delete-button\"\n          onClick={props.onDeleteClick}\n        >X</button>\n      }\n      </div>\n\n      <div className={`${props.thisClass}-list`}>\n        <div\n          className=\"list-content\"\n          onDragEnter={event => handleDragOver(event)}\n        >\n          {props.items.filter( item => item.belongsTo === props.id).sort( (a,b) => (a.index > b.index) ? 1 : -1).map( item => (\n            <Listitem\n              key={item.id}\n              id={item.id}\n              index={item.index}\n              content={item.content}\n              swapItems={handleSwapItems}\n              dragDispatch={props.dragDispatch}\n              onChange={changeItem}\n              onDeleteClick={() => removeItem(item.id)}\n            />\n          ))}\n        </div>\n        <button\n          className={\"addItemButton\"}\n          style={{ fontsize: '2rem' }}\n          onClick={handleAdditemClick}\n        >{\"+\"}</button>\n      </div>\n    </>\n  );\n};\n\nconst listReducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_LIST':\n      return [ ...state, action.payload ];\n    case 'REMOVE_LIST':\n      return state.filter(list => list.id !== action.listId);\n    case 'UPDATE_LIST_TITLE':\n      return state.map( list => {\n        if (list.id === action.id) {\n          return { ...list, title: action.payload};\n        } else {\n          return list\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nconst itemReducer = (state, action) => {\n  switch(action.type) {\n    case 'ADD_TODO':\n      return [...state, action.payload];\n    case 'REMOVE_TODO':\n      // filters out item with specified ID, then remaps \n      //   remaining items' index properties to fill gaps\n      return state.filter(item => item.id !== action.itemId).map( (item, index) => {\n        return {...item, index: index}\n      });\n    case 'UPDATE_TODO_CONTENT':\n      return state.map( item => {\n        if (item.id === action.itemId) {\n          return {...item, content: action.payload}\n        } else {\n          return item\n        }\n      });\n    case 'SWAP_TODO_ORDER':\n      // receives two item ids, swaps their index values\n      return state;\n    case 'UPDATE_TODO_OWNER':\n      return state.map( item => {\n        if (item.id === action.itemId) {\n          return {...item, belongsTo: action.newOwner}\n        } else {\n          return item\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nconst dragReducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_DRAGGED_ITEM':\n      return action.payload;\n    case 'CLEAR_DRAGGED_ITEM':\n      return {};\n    default:\n      return state;\n    }\n};\n\nconst ListDispatchContext = React.createContext(null);\nconst ItemDispatchContext = React.createContext(null);\n\n// Data architecture:\n//  Three reducers:\n//  - listReducer: An array of JS Objects\n//      - id: Integer, unique within the application\n//      - title: String, title of the list\n//  - itemReducer: An array of item objects:\n//      - id: Integer, unique within the application\n//      - belongsTo: Integer, id of the list that owns this \n//      - content: String, the actual todo-text input by user\n//      - index: order placement on the list\n//  - dragReducer: holds copy of current dragged item\n//      - item: Object, dragged item\n//  \n//  * Dragged item information is tracked outside of the \n//    built-in event.dataTransfer object, because the HTML5\n//    drag-and-drop spec does not allow dataTransfer to be\n//    accessed during a dragOver event. However, I need to \n//    know which item is being dragged over so I can update\n//    it's owning list, and index/order in the list, as the\n//    user drags the item around - allowing for visual \n//    feedback in the form of a placeholder/shadow item\n//    underneath the user's cursor.\n// \n//  There are a handful of properties that don't get stored\n//    in the reducer, for example whether a list can be \n//    deleted - this is hardcoded off for the weekdays, and\n//    on for everything else. May change in the future.\n//\n//  Lists also receive their current number of items as a prop\n//    for passing through itemDispatch to set correct item \n//    order (new items are assigned index=listSize)\n//\n//  The board is constructed by referencing both reducers to\n//    get the lists and their items, pulling item content out\n//    of the item reducer along the way.\n\nconst initialListState = [\n  {id: 'm', title: \"Monday\"},\n  {id: 't', title: \"Tuesday\"},\n  {id: 'w', title: \"Wednesday\"},\n  {id: 'r', title: \"Thursday\"},\n  {id: 'f', title: \"Friday\"},\n  {id: 's', title: \"Saturday\"},\n  {id: 'u', title: \"Sunday\"},\n];\n\nconst initialItemState = [];\nconst initialDragState = {};\n\nconst Todoboard = (props) => {\n  const [lists, listDispatch] = React.useReducer(listReducer, initialListState);\n  const [items, itemDispatch] = React.useReducer(itemReducer, initialItemState);\n  const [draggedItem, dragDispatch] = React.useReducer(dragReducer, initialDragState);\n\n  const [nextItemId, setNextItemId] = React.useState(props.startId || 0);\n\n  const getId = () => {\n    const outId = nextItemId;\n    setNextItemId(nextItemId + 1);\n    return outId;\n  };\n  \n  const newList = () => {\n    const outList = {\n      title: \"New List\",\n      id: getId(),\n    };\n    return outList;\n  };\n\n  const addList = () => {\n    const nl = newList();\n    listDispatch({type: 'ADD_LIST', listId: nl.id, payload: nl});\n  };\n\n  const removeList = (listId) => {\n    // remove a lists items first to prevent orphaned data\n    items.map( item =>  {\n      if (item.belongsTo === listId) {\n        itemDispatch({\n          type: 'REMOVE_TODO',\n          itemId: item.id\n        });\n      }\n    });\n    \n    listDispatch({type: 'REMOVE_LIST', listId: listId});\n    \n  };\n\n  const getListSize = (listId) => {\n    const ownedItems = items.filter( item => item.belongsTo === listId)\n    return ownedItems.length;\n  };\n\n  return (\n    <>\n    <ListDispatchContext.Provider value={listDispatch}>\n    <ItemDispatchContext.Provider value={itemDispatch}>\n    <div className=\"calendar\">\n      <div className=\"calendar-container\" >\n        {lists.map( (list, index) => (\n          (index <= 6) &&\n            <div className=\"calendar-individual\" key={list.id}>\n              <>\n              <Todolist\n                thisClass={\"calendar\"}\n                title={list.title}\n                key={list.id}\n                id={list.id}\n                getId={getId}\n                items={items}\n                getSize={getListSize}\n                canDelete={false}\n                canEditTitle={false}\n                draggedItem={draggedItem}\n                dragDispatch={dragDispatch}\n                onDeleteClick={() => removeList(list.id)}\n              />\n              </>\n            </div>\n        ))}\n      </div>\n    </div>\n    <hr style={{width: \"90vw\"}}/>\n    <div className=\"todo\">\n    <div className=\"todo-container\">\n    {lists.length > 0 &&\n      <>\n      {lists.map( (list, index) => (\n        (index > 6) && \n        <div className=\"todo-individual\" key={list.id}>\n        <>\n        <Todolist\n          thisClass={\"todo\"}\n          canDelete={true}\n          title={list.title}\n          key={list.id}\n          id={list.id}\n          items={items}\n          getSize={getListSize}\n          getId={getId} \n          canEditTitle={true}\n          draggedItem={draggedItem}\n          dragDispatch={dragDispatch}\n          onDeleteClick={() => removeList(list.id)}\n        />\n        </>\n        </div>\n      ))}\n      </>\n    }\n\n    <button\n      className=\"addListButton\"\n      onClick={addList}\n    >{\"+ Add list\"}</button>\n    </div>\n    </div>\n    </ItemDispatchContext.Provider>\n    </ListDispatchContext.Provider>\n    </>\n  )\n};\n\nexport default Todoboard;\n","import React from 'react';\nimport Todoboard from './Todoboard';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Todoboard />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}